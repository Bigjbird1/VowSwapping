{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-03T15:40:54.044Z",
    "end": "2025-03-03T15:41:04.385Z",
    "duration": 10341,
    "testsRegistered": 16,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 15,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "31a916fd-7968-4767-a3e4-1d50797f5867",
      "title": "",
      "fullFile": "cypress/e2e/profile-management.cy.js",
      "file": "cypress/e2e/profile-management.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dc77cdb4-5e3e-4042-afaa-8221d673c641",
          "title": "User Profile Management",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a63b40c-d918-4044-a30b-3d002f2b6583",
              "title": "Profile Information",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow updating user profile information",
                  "fullTitle": "User Profile Management Profile Information should allow updating user profile information",
                  "timedOut": null,
                  "duration": 10256,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Update profile information\ncy.get('input[name=\"name\"]').clear().type('Updated Name');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Profile updated successfully').should('be.visible');\n// Reload page and verify changes persisted\ncy.reload();\ncy.get('input[name=\"name\"]').should('have.value', 'Updated Name');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `input[name=\"email\"]`, but never found it.\n\nThis error occurred while creating the session. Because the session setup failed, we failed the test.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User Profile Management`",
                    "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `input[name=\"email\"]`, but never found it.\n\nThis error occurred while creating the session. Because the session setup failed, we failed the test.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User Profile Management`\n    at Object.eval [as setup] (webpack://vowswapping/./cypress/support/commands.js:36:7)",
                    "diff": null
                  },
                  "uuid": "0111e875-7ee1-42fb-ac19-0fec23a0423f",
                  "parentUUID": "6a63b40c-d918-4044-a30b-3d002f2b6583",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields",
                  "fullTitle": "User Profile Management Profile Information should validate required fields",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Clear required field\ncy.get('input[name=\"name\"]').clear();\ncy.get('button[type=\"submit\"]').click();\n// Verify validation error\ncy.contains('Name is required').should('be.visible');",
                  "err": {},
                  "uuid": "79c37e24-1f40-475f-9031-6f942087f54a",
                  "parentUUID": "6a63b40c-d918-4044-a30b-3d002f2b6583",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate email format",
                  "fullTitle": "User Profile Management Profile Information should validate email format",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Enter invalid email\ncy.get('input[name=\"email\"]').clear().type('invalid-email');\ncy.get('button[type=\"submit\"]').click();\n// Verify validation error\ncy.contains('Please enter a valid email address').should('be.visible');",
                  "err": {},
                  "uuid": "b383861d-1cdd-4769-8322-74cbed5ea037",
                  "parentUUID": "6a63b40c-d918-4044-a30b-3d002f2b6583",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0111e875-7ee1-42fb-ac19-0fec23a0423f"
              ],
              "pending": [],
              "skipped": [
                "79c37e24-1f40-475f-9031-6f942087f54a",
                "b383861d-1cdd-4769-8322-74cbed5ea037"
              ],
              "duration": 10256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f76b2560-19af-4e41-baf5-5cd9e69d26ad",
              "title": "Address Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user addresses",
                  "fullTitle": "User Profile Management Address Management should display user addresses",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Check if the addresses section is visible\ncy.get('[data-testid=\"addresses-list\"]').should('exist');",
                  "err": {},
                  "uuid": "ab261e18-b3ba-4c83-abe4-efe8d07e94c5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow adding a new address",
                  "fullTitle": "User Profile Management Address Management should allow adding a new address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Click add new address button\ncy.contains('Add New Address').click();\n// Fill address form\ncy.get('input[name=\"name\"]').type('Home Address');\ncy.get('input[name=\"street\"]').type('123 Test Street');\ncy.get('input[name=\"city\"]').type('Test City');\ncy.get('input[name=\"state\"]').type('Test State');\ncy.get('input[name=\"postalCode\"]').type('12345');\ncy.get('input[name=\"country\"]').type('Test Country');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Address added successfully').should('be.visible');\n// Verify address appears in the list\ncy.contains('Home Address').should('be.visible');\ncy.contains('123 Test Street').should('be.visible');",
                  "err": {},
                  "uuid": "a7138f62-38a1-44e8-8a89-ca1be3296f23",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow editing an existing address",
                  "fullTitle": "User Profile Management Address Management should allow editing an existing address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Click edit button on first address\ncy.get('[data-testid=\"edit-address-button\"]').first().click();\n// Update address\ncy.get('input[name=\"street\"]').clear().type('456 Updated Street');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Address updated successfully').should('be.visible');\n// Verify address was updated\ncy.contains('456 Updated Street').should('be.visible');",
                  "err": {},
                  "uuid": "840c90c8-e73e-4789-977c-85058ed36799",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow setting an address as default",
                  "fullTitle": "User Profile Management Address Management should allow setting an address as default",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Find a non-default address and set it as default\ncy.get('[data-testid=\"address-card\"]').not('.default-address').first().within(() => {\n  cy.get('[data-testid=\"set-default-button\"]').click();\n});\n// Verify success message\ncy.contains('Default address updated').should('be.visible');\n// Verify the address is now marked as default\ncy.get('[data-testid=\"address-card\"]').first().should('have.class', 'default-address');",
                  "err": {},
                  "uuid": "90f24f9f-44de-4b85-a6fc-7b6612ebfa9d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow deleting an address",
                  "fullTitle": "User Profile Management Address Management should allow deleting an address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Get address text for verification\ncy.get('[data-testid=\"address-card\"]').first().invoke('text').as('addressText');\n// Click delete button on first address\ncy.get('[data-testid=\"delete-address-button\"]').first().click();\n// Confirm deletion\ncy.get('[data-testid=\"confirm-delete-button\"]').click();\n// Verify success message\ncy.contains('Address deleted successfully').should('be.visible');\n// Verify address no longer appears\ncy.get('@addressText').then(text => {\n  cy.contains(text).should('not.exist');\n});",
                  "err": {},
                  "uuid": "ef27fddf-83fa-4742-81ae-0bec0d3701f0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate required fields when adding an address",
                  "fullTitle": "User Profile Management Address Management should validate required fields when adding an address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Click add new address button\ncy.contains('Add New Address').click();\n// Submit without filling required fields\ncy.get('button[type=\"submit\"]').click();\n// Verify validation errors\ncy.contains('Name is required').should('be.visible');\ncy.contains('Street is required').should('be.visible');\ncy.contains('City is required').should('be.visible');\ncy.contains('State is required').should('be.visible');\ncy.contains('Postal code is required').should('be.visible');\ncy.contains('Country is required').should('be.visible');",
                  "err": {},
                  "uuid": "0ec56b03-1b7b-4967-bc8a-1da2de9920a2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ab261e18-b3ba-4c83-abe4-efe8d07e94c5",
                "a7138f62-38a1-44e8-8a89-ca1be3296f23",
                "840c90c8-e73e-4789-977c-85058ed36799",
                "90f24f9f-44de-4b85-a6fc-7b6612ebfa9d",
                "ef27fddf-83fa-4742-81ae-0bec0d3701f0",
                "0ec56b03-1b7b-4967-bc8a-1da2de9920a2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd7cb693-442e-418a-8069-d8b95ae8eafb",
              "title": "Order History",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user order history",
                  "fullTitle": "User Profile Management Order History should display user order history",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/orders', {\n  failOnStatusCode: false\n});\n// Check if the orders section is visible\ncy.get('[data-testid=\"orders-list\"]').should('exist');",
                  "err": {},
                  "uuid": "d0283a06-5592-4514-82a5-cd7775a50e75",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow viewing order details",
                  "fullTitle": "User Profile Management Order History should allow viewing order details",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/orders', {\n  failOnStatusCode: false\n});\n// Check if there are any orders\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"order-card\"]').length > 0) {\n    // Click on the first order to view details\n    cy.get('[data-testid=\"order-card\"]').first().click();\n    // Verify order details are displayed\n    cy.get('[data-testid=\"order-details\"]').should('be.visible');\n    cy.contains('Order Items').should('be.visible');\n    cy.contains('Shipping Address').should('be.visible');\n  } else {\n    // Skip test if no orders exist\n    cy.log('No orders found to test');\n  }\n});",
                  "err": {},
                  "uuid": "01337858-ad1c-4bdc-891f-744ca8e1a1a0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d0283a06-5592-4514-82a5-cd7775a50e75",
                "01337858-ad1c-4bdc-891f-744ca8e1a1a0"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e4d3441-c8d7-4c60-85e1-b6e095cbf48d",
              "title": "Wishlist Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user wishlist",
                  "fullTitle": "User Profile Management Wishlist Management should display user wishlist",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/wishlist', {\n  failOnStatusCode: false\n});\n// Check if the wishlist section is visible\ncy.get('[data-testid=\"wishlist-items\"]').should('exist');",
                  "err": {},
                  "uuid": "ee83caac-3b4b-4cd0-8f62-58b6f5120732",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow removing items from wishlist",
                  "fullTitle": "User Profile Management Wishlist Management should allow removing items from wishlist",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/wishlist', {\n  failOnStatusCode: false\n});\n// Check if there are any wishlist items\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"wishlist-item\"]').length > 0) {\n    // Get item text for verification\n    cy.get('[data-testid=\"wishlist-item\"]').first().invoke('text').as('itemText');\n    // Click remove button on first item\n    cy.get('[data-testid=\"remove-from-wishlist\"]').first().click();\n    // Verify success message\n    cy.contains('Item removed from wishlist').should('be.visible');\n    // Verify item no longer appears\n    cy.get('@itemText').then(text => {\n      cy.contains(text).should('not.exist');\n    });\n  } else {\n    // Skip test if no wishlist items exist\n    cy.log('No wishlist items found to test');\n  }\n});",
                  "err": {},
                  "uuid": "1488b1d0-dca2-436c-b7e4-c441d0546de4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ee83caac-3b4b-4cd0-8f62-58b6f5120732",
                "1488b1d0-dca2-436c-b7e4-c441d0546de4"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5613fafd-765a-47b0-94f7-64e16b087ada",
              "title": "Reviews Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user reviews",
                  "fullTitle": "User Profile Management Reviews Management should display user reviews",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if the reviews section is visible\ncy.get('[data-testid=\"user-reviews\"]').should('exist');",
                  "err": {},
                  "uuid": "95966f1f-55ad-4e26-ad02-094769035a0b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow editing a review",
                  "fullTitle": "User Profile Management Reviews Management should allow editing a review",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if there are any reviews\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"review-item\"]').length > 0) {\n    // Click edit button on first review\n    cy.get('[data-testid=\"edit-review-button\"]').first().click();\n    // Update review\n    cy.get('textarea[name=\"comment\"]').clear().type('Updated review comment');\n    cy.get('button[type=\"submit\"]').click();\n    // Verify success message\n    cy.contains('Review updated successfully').should('be.visible');\n    // Verify review was updated\n    cy.contains('Updated review comment').should('be.visible');\n  } else {\n    // Skip test if no reviews exist\n    cy.log('No reviews found to test');\n  }\n});",
                  "err": {},
                  "uuid": "3e153a8b-4e7b-49ab-afc0-580d3195df13",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow deleting a review",
                  "fullTitle": "User Profile Management Reviews Management should allow deleting a review",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if there are any reviews\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"review-item\"]').length > 0) {\n    // Get review text for verification\n    cy.get('[data-testid=\"review-item\"]').first().invoke('text').as('reviewText');\n    // Click delete button on first review\n    cy.get('[data-testid=\"delete-review-button\"]').first().click();\n    // Confirm deletion\n    cy.get('[data-testid=\"confirm-delete-button\"]').click();\n    // Verify success message\n    cy.contains('Review deleted successfully').should('be.visible');\n    // Verify review no longer appears\n    cy.get('@reviewText').then(text => {\n      cy.contains(text).should('not.exist');\n    });\n  } else {\n    // Skip test if no reviews exist\n    cy.log('No reviews found to test');\n  }\n});",
                  "err": {},
                  "uuid": "6c704b42-4e7c-4d5b-9868-0c001ee5df47",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "95966f1f-55ad-4e26-ad02-094769035a0b",
                "3e153a8b-4e7b-49ab-afc0-580d3195df13",
                "6c704b42-4e7c-4d5b-9868-0c001ee5df47"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-results/cypress",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}