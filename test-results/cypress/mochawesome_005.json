{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-03T15:39:14.893Z",
    "end": "2025-03-03T15:39:25.182Z",
    "duration": 10289,
    "testsRegistered": 16,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 15,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "ced7e773-8e06-4bc9-a1bb-0f96ff896468",
      "title": "",
      "fullFile": "cypress/e2e/profile-management.cy.js",
      "file": "cypress/e2e/profile-management.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd84a98a-9a28-4c5f-9b3e-bdbd4e05a87d",
          "title": "User Profile Management",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ecba18ee-ca45-410a-85e2-5531ff2c1e41",
              "title": "Profile Information",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow updating user profile information",
                  "fullTitle": "User Profile Management Profile Information should allow updating user profile information",
                  "timedOut": null,
                  "duration": 10184,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Update profile information\ncy.get('input[name=\"name\"]').clear().type('Updated Name');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Profile updated successfully').should('be.visible');\n// Reload page and verify changes persisted\ncy.reload();\ncy.get('input[name=\"name\"]').should('have.value', 'Updated Name');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `input[name=\"email\"]`, but never found it.\n\nThis error occurred while creating the session. Because the session setup failed, we failed the test.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User Profile Management`",
                    "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `input[name=\"email\"]`, but never found it.\n\nThis error occurred while creating the session. Because the session setup failed, we failed the test.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User Profile Management`\n    at Object.eval [as setup] (webpack://vowswapping/./cypress/support/commands.js:36:7)",
                    "diff": null
                  },
                  "uuid": "4f6b8c2f-2eb2-40cf-87ce-a76ecc794b6b",
                  "parentUUID": "ecba18ee-ca45-410a-85e2-5531ff2c1e41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields",
                  "fullTitle": "User Profile Management Profile Information should validate required fields",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Clear required field\ncy.get('input[name=\"name\"]').clear();\ncy.get('button[type=\"submit\"]').click();\n// Verify validation error\ncy.contains('Name is required').should('be.visible');",
                  "err": {},
                  "uuid": "7485267d-508f-4ba1-b2c5-23bb3499dbfc",
                  "parentUUID": "ecba18ee-ca45-410a-85e2-5531ff2c1e41",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate email format",
                  "fullTitle": "User Profile Management Profile Information should validate email format",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile', {\n  failOnStatusCode: false\n});\n// Enter invalid email\ncy.get('input[name=\"email\"]').clear().type('invalid-email');\ncy.get('button[type=\"submit\"]').click();\n// Verify validation error\ncy.contains('Please enter a valid email address').should('be.visible');",
                  "err": {},
                  "uuid": "24e82584-6fd9-4867-b635-07b446a11184",
                  "parentUUID": "ecba18ee-ca45-410a-85e2-5531ff2c1e41",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4f6b8c2f-2eb2-40cf-87ce-a76ecc794b6b"
              ],
              "pending": [],
              "skipped": [
                "7485267d-508f-4ba1-b2c5-23bb3499dbfc",
                "24e82584-6fd9-4867-b635-07b446a11184"
              ],
              "duration": 10184,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7364d53-4a09-4cc2-a3f3-88f006d2dae1",
              "title": "Address Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user addresses",
                  "fullTitle": "User Profile Management Address Management should display user addresses",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Check if the addresses section is visible\ncy.get('[data-testid=\"addresses-list\"]').should('exist');",
                  "err": {},
                  "uuid": "0373acf8-91b5-4a2b-b20e-0faee5660690",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow adding a new address",
                  "fullTitle": "User Profile Management Address Management should allow adding a new address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Click add new address button\ncy.contains('Add New Address').click();\n// Fill address form\ncy.get('input[name=\"name\"]').type('Home Address');\ncy.get('input[name=\"street\"]').type('123 Test Street');\ncy.get('input[name=\"city\"]').type('Test City');\ncy.get('input[name=\"state\"]').type('Test State');\ncy.get('input[name=\"postalCode\"]').type('12345');\ncy.get('input[name=\"country\"]').type('Test Country');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Address added successfully').should('be.visible');\n// Verify address appears in the list\ncy.contains('Home Address').should('be.visible');\ncy.contains('123 Test Street').should('be.visible');",
                  "err": {},
                  "uuid": "ab0a12f8-6e49-4e6d-9e55-ce224f6586da",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow editing an existing address",
                  "fullTitle": "User Profile Management Address Management should allow editing an existing address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Click edit button on first address\ncy.get('[data-testid=\"edit-address-button\"]').first().click();\n// Update address\ncy.get('input[name=\"street\"]').clear().type('456 Updated Street');\ncy.get('button[type=\"submit\"]').click();\n// Verify success message\ncy.contains('Address updated successfully').should('be.visible');\n// Verify address was updated\ncy.contains('456 Updated Street').should('be.visible');",
                  "err": {},
                  "uuid": "ebd26b52-0bd1-4d26-b3fa-2c32363e5f32",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow setting an address as default",
                  "fullTitle": "User Profile Management Address Management should allow setting an address as default",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Find a non-default address and set it as default\ncy.get('[data-testid=\"address-card\"]').not('.default-address').first().within(() => {\n  cy.get('[data-testid=\"set-default-button\"]').click();\n});\n// Verify success message\ncy.contains('Default address updated').should('be.visible');\n// Verify the address is now marked as default\ncy.get('[data-testid=\"address-card\"]').first().should('have.class', 'default-address');",
                  "err": {},
                  "uuid": "44952eef-5505-4054-8677-4536c77cc707",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow deleting an address",
                  "fullTitle": "User Profile Management Address Management should allow deleting an address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Ensure there's at least one address\ncy.get('[data-testid=\"address-card\"]').should('have.length.at.least', 1);\n// Get address text for verification\ncy.get('[data-testid=\"address-card\"]').first().invoke('text').as('addressText');\n// Click delete button on first address\ncy.get('[data-testid=\"delete-address-button\"]').first().click();\n// Confirm deletion\ncy.get('[data-testid=\"confirm-delete-button\"]').click();\n// Verify success message\ncy.contains('Address deleted successfully').should('be.visible');\n// Verify address no longer appears\ncy.get('@addressText').then(text => {\n  cy.contains(text).should('not.exist');\n});",
                  "err": {},
                  "uuid": "3369e1f1-64ca-49de-8e80-a9dcc12ae59c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should validate required fields when adding an address",
                  "fullTitle": "User Profile Management Address Management should validate required fields when adding an address",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/addresses', {\n  failOnStatusCode: false\n});\n// Click add new address button\ncy.contains('Add New Address').click();\n// Submit without filling required fields\ncy.get('button[type=\"submit\"]').click();\n// Verify validation errors\ncy.contains('Name is required').should('be.visible');\ncy.contains('Street is required').should('be.visible');\ncy.contains('City is required').should('be.visible');\ncy.contains('State is required').should('be.visible');\ncy.contains('Postal code is required').should('be.visible');\ncy.contains('Country is required').should('be.visible');",
                  "err": {},
                  "uuid": "5ceaa77a-7e52-4040-985e-a9e3bb3296f1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0373acf8-91b5-4a2b-b20e-0faee5660690",
                "ab0a12f8-6e49-4e6d-9e55-ce224f6586da",
                "ebd26b52-0bd1-4d26-b3fa-2c32363e5f32",
                "44952eef-5505-4054-8677-4536c77cc707",
                "3369e1f1-64ca-49de-8e80-a9dcc12ae59c",
                "5ceaa77a-7e52-4040-985e-a9e3bb3296f1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d7502a2-665b-4068-9aa9-6d8b963c96ac",
              "title": "Order History",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user order history",
                  "fullTitle": "User Profile Management Order History should display user order history",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/orders', {\n  failOnStatusCode: false\n});\n// Check if the orders section is visible\ncy.get('[data-testid=\"orders-list\"]').should('exist');",
                  "err": {},
                  "uuid": "5e1d0ff6-43e1-4d5b-8caf-3b4186422319",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow viewing order details",
                  "fullTitle": "User Profile Management Order History should allow viewing order details",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/orders', {\n  failOnStatusCode: false\n});\n// Check if there are any orders\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"order-card\"]').length > 0) {\n    // Click on the first order to view details\n    cy.get('[data-testid=\"order-card\"]').first().click();\n    // Verify order details are displayed\n    cy.get('[data-testid=\"order-details\"]').should('be.visible');\n    cy.contains('Order Items').should('be.visible');\n    cy.contains('Shipping Address').should('be.visible');\n  } else {\n    // Skip test if no orders exist\n    cy.log('No orders found to test');\n  }\n});",
                  "err": {},
                  "uuid": "b3f3d5b9-c470-4dd5-b685-631181e94fc1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5e1d0ff6-43e1-4d5b-8caf-3b4186422319",
                "b3f3d5b9-c470-4dd5-b685-631181e94fc1"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67a75bf7-9f28-44fa-956a-b699dd5dc7a5",
              "title": "Wishlist Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user wishlist",
                  "fullTitle": "User Profile Management Wishlist Management should display user wishlist",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/wishlist', {\n  failOnStatusCode: false\n});\n// Check if the wishlist section is visible\ncy.get('[data-testid=\"wishlist-items\"]').should('exist');",
                  "err": {},
                  "uuid": "3795839a-062f-4899-97fd-0c41d1655ac8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow removing items from wishlist",
                  "fullTitle": "User Profile Management Wishlist Management should allow removing items from wishlist",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/wishlist', {\n  failOnStatusCode: false\n});\n// Check if there are any wishlist items\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"wishlist-item\"]').length > 0) {\n    // Get item text for verification\n    cy.get('[data-testid=\"wishlist-item\"]').first().invoke('text').as('itemText');\n    // Click remove button on first item\n    cy.get('[data-testid=\"remove-from-wishlist\"]').first().click();\n    // Verify success message\n    cy.contains('Item removed from wishlist').should('be.visible');\n    // Verify item no longer appears\n    cy.get('@itemText').then(text => {\n      cy.contains(text).should('not.exist');\n    });\n  } else {\n    // Skip test if no wishlist items exist\n    cy.log('No wishlist items found to test');\n  }\n});",
                  "err": {},
                  "uuid": "f13d6b0b-91c3-418e-bf2f-5d0a0cc53b72",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "3795839a-062f-4899-97fd-0c41d1655ac8",
                "f13d6b0b-91c3-418e-bf2f-5d0a0cc53b72"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3f1b132-40b0-4c36-a75e-cc13adf1177f",
              "title": "Reviews Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display user reviews",
                  "fullTitle": "User Profile Management Reviews Management should display user reviews",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if the reviews section is visible\ncy.get('[data-testid=\"user-reviews\"]').should('exist');",
                  "err": {},
                  "uuid": "c81bb9f0-c8e0-4ff0-9a82-4b40d2bb5558",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow editing a review",
                  "fullTitle": "User Profile Management Reviews Management should allow editing a review",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if there are any reviews\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"review-item\"]').length > 0) {\n    // Click edit button on first review\n    cy.get('[data-testid=\"edit-review-button\"]').first().click();\n    // Update review\n    cy.get('textarea[name=\"comment\"]').clear().type('Updated review comment');\n    cy.get('button[type=\"submit\"]').click();\n    // Verify success message\n    cy.contains('Review updated successfully').should('be.visible');\n    // Verify review was updated\n    cy.contains('Updated review comment').should('be.visible');\n  } else {\n    // Skip test if no reviews exist\n    cy.log('No reviews found to test');\n  }\n});",
                  "err": {},
                  "uuid": "a49ff747-5787-4e0a-9302-0853b5e04836",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow deleting a review",
                  "fullTitle": "User Profile Management Reviews Management should allow deleting a review",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit('/profile/reviews', {\n  failOnStatusCode: false\n});\n// Check if there are any reviews\ncy.get('body').then($body => {\n  if ($body.find('[data-testid=\"review-item\"]').length > 0) {\n    // Get review text for verification\n    cy.get('[data-testid=\"review-item\"]').first().invoke('text').as('reviewText');\n    // Click delete button on first review\n    cy.get('[data-testid=\"delete-review-button\"]').first().click();\n    // Confirm deletion\n    cy.get('[data-testid=\"confirm-delete-button\"]').click();\n    // Verify success message\n    cy.contains('Review deleted successfully').should('be.visible');\n    // Verify review no longer appears\n    cy.get('@reviewText').then(text => {\n      cy.contains(text).should('not.exist');\n    });\n  } else {\n    // Skip test if no reviews exist\n    cy.log('No reviews found to test');\n  }\n});",
                  "err": {},
                  "uuid": "7df6c761-d890-49c3-8ce6-7292f32191e2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "c81bb9f0-c8e0-4ff0-9a82-4b40d2bb5558",
                "a49ff747-5787-4e0a-9302-0853b5e04836",
                "7df6c761-d890-49c3-8ce6-7292f32191e2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-results/cypress",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}