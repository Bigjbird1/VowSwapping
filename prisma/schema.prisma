// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  addresses         Address[]
  orders            Order[]
  accounts          Account[]
  sessions          Session[]
  products          Product[]
  wishlists         Wishlist[]
  
  // Seller fields
  isSeller          Boolean   @default(false)
  sellerApproved    Boolean   @default(false)
  shopName          String?
  shopDescription   String?   
  sellerRating      Float?
  sellerRatingsCount Int      @default(0)
  sellerSince       DateTime?
  sellerBio         String?   
  sellerLogo        String?
  sellerBanner      String?
  sellerSocial      String?   // Store social media links as JSON string for SQLite
  reviews           Review[]  // Reviews received as a seller
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  total       Float
  status      String      @default("PENDING") // Using string for enum in SQLite
  addressId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String   @id @default(cuid())
  title         String
  description   String   
  price         Float
  discountPrice Float?
  images        String   // Store as JSON string for SQLite
  category      String   // Using string for enum in SQLite
  condition     String   // Using string for enum in SQLite
  tags          String   // Store as JSON string for SQLite
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sellerId      String?
  seller        User?    @relation(fields: [sellerId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]
  wishlists     Wishlist[]
  approved      Boolean  @default(false)
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 star rating
  comment     String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Product review
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  
  // Seller review
  sellerId    String?
  seller      User?    @relation(fields: [sellerId], references: [id])
  
  // Reviewer
  reviewerId  String
  reviewerName String
}
